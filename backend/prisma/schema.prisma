// This is your Prisma schema file,

/* DEFAULT */
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Make sure DATABASE_URL is in your .env file
}

/* Products */
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId    Int?
  subcategoryId Int? // Optional: If a product is tied to a subcategory
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  category      Category?    @relation(fields: [categoryId], references: [id])
  images        Image[]
  variants      ProductVariant[]
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  size      String   // E.g., "S", "M", "L", "XL"
  stock     Int      // Stock available for this size
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Product
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[] // Relation to the Product model  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


/* Users */
model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String   @unique
  password  String
  cartData  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}