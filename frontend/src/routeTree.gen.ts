/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RouterImport } from './routes/router'
import { Route as LoginRouteImport } from './routes/login.route'
import { Route as ProductsidImport } from './routes/products/[id]'

// Create/Update Routes

const RouterRoute = RouterImport.update({
  id: '/router',
  path: '/router',
  getParentRoute: () => rootRoute,
} as any)

const LoginRouteRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProductsidRoute = ProductsidImport.update({
  id: '/products/[id]',
  path: '/products/[id]',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/router': {
      id: '/router'
      path: '/router'
      fullPath: '/router'
      preLoaderRoute: typeof RouterImport
      parentRoute: typeof rootRoute
    }
    '/products/[id]': {
      id: '/products/[id]'
      path: '/products/[id]'
      fullPath: '/products/[id]'
      preLoaderRoute: typeof ProductsidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/login': typeof LoginRouteRoute
  '/router': typeof RouterRoute
  '/products/[id]': typeof ProductsidRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRouteRoute
  '/router': typeof RouterRoute
  '/products/[id]': typeof ProductsidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRouteRoute
  '/router': typeof RouterRoute
  '/products/[id]': typeof ProductsidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/router' | '/products/[id]'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/router' | '/products/[id]'
  id: '__root__' | '/login' | '/router' | '/products/[id]'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRouteRoute: typeof LoginRouteRoute
  RouterRoute: typeof RouterRoute
  ProductsidRoute: typeof ProductsidRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoginRouteRoute: LoginRouteRoute,
  RouterRoute: RouterRoute,
  ProductsidRoute: ProductsidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/router",
        "/products/[id]"
      ]
    },
    "/login": {
      "filePath": "login.route.tsx"
    },
    "/router": {
      "filePath": "router.tsx"
    },
    "/products/[id]": {
      "filePath": "products/[id].tsx"
    }
  }
}
ROUTE_MANIFEST_END */
